{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Hyperparameter Experiment #2**\n",
    "\n",
    "Calculate Precision, Recall, and mAP based on 8 hyperparameter experiment scenarios.\n",
    "1. Base Configuration\n",
    "2. RPN_NMS_THRESHOLD = 0.6 \n",
    "3. RPN_NMS_THRESHOLD = 0.8 \n",
    "4. DETECTION_MIN_CONFIDENCE = 0.8\n",
    "5. DETECTION_MIN_CONFIDENCE = 0.95\n",
    "6. DETECTION_NMS_THRESHOLD = 0.1\n",
    "7. DETECTION_NMS_THRESHOLD = 0.5 \n",
    "8. RPN_ANCHOR_STRIDE = 2\n",
    "\n",
    "With base configuration:\n",
    "1. RPN_NMS_THRESHOLD = 0.7\n",
    "2. DETECTION_MIN_CONFIDENCE = 0.7\n",
    "3. DETECTION_NMS_THRESHOLD = 0.3\n",
    "4. RPN_ANCHOR_STRIDE = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import, Setup Configuration, and Load Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Configurations:\n",
      "BACKBONE                       resnet101\n",
      "BACKBONE_STRIDES               [4, 8, 16, 32, 64]\n",
      "BATCH_SIZE                     1\n",
      "BBOX_STD_DEV                   [0.1 0.1 0.2 0.2]\n",
      "COMPUTE_BACKBONE_SHAPE         None\n",
      "DETECTION_MAX_INSTANCES        100\n",
      "DETECTION_MIN_CONFIDENCE       0.7\n",
      "DETECTION_NMS_THRESHOLD        0.3\n",
      "FPN_CLASSIF_FC_LAYERS_SIZE     1024\n",
      "GPU_COUNT                      1\n",
      "GRADIENT_CLIP_NORM             5.0\n",
      "IMAGES_PER_GPU                 1\n",
      "IMAGE_CHANNEL_COUNT            3\n",
      "IMAGE_MAX_DIM                  1024\n",
      "IMAGE_META_SIZE                14\n",
      "IMAGE_MIN_DIM                  800\n",
      "IMAGE_MIN_SCALE                0\n",
      "IMAGE_RESIZE_MODE              square\n",
      "IMAGE_SHAPE                    [1024 1024    3]\n",
      "LEARNING_MOMENTUM              0.9\n",
      "LEARNING_RATE                  0.001\n",
      "LOSS_WEIGHTS                   {'rpn_class_loss': 1.0, 'rpn_bbox_loss': 1.0, 'mrcnn_class_loss': 1.0, 'mrcnn_bbox_loss': 1.0, 'mrcnn_mask_loss': 1.0}\n",
      "MASK_POOL_SIZE                 14\n",
      "MASK_SHAPE                     [28, 28]\n",
      "MAX_GT_INSTANCES               100\n",
      "MEAN_PIXEL                     [123.7 116.8 103.9]\n",
      "MINI_MASK_SHAPE                (56, 56)\n",
      "NAME                           FaceDetection\n",
      "NUM_CLASSES                    2\n",
      "POOL_SIZE                      7\n",
      "POST_NMS_ROIS_INFERENCE        1000\n",
      "POST_NMS_ROIS_TRAINING         2000\n",
      "PRE_NMS_LIMIT                  6000\n",
      "ROI_POSITIVE_RATIO             0.33\n",
      "RPN_ANCHOR_RATIOS              [0.5, 1, 2]\n",
      "RPN_ANCHOR_SCALES              (32, 64, 128, 256, 512)\n",
      "RPN_ANCHOR_STRIDE              1\n",
      "RPN_BBOX_STD_DEV               [0.1 0.1 0.2 0.2]\n",
      "RPN_NMS_THRESHOLD              0.6\n",
      "RPN_TRAIN_ANCHORS_PER_IMAGE    256\n",
      "STEPS_PER_EPOCH                100\n",
      "TOP_DOWN_PYRAMID_SIZE          256\n",
      "TRAIN_BN                       False\n",
      "TRAIN_ROIS_PER_IMAGE           200\n",
      "USE_MINI_MASK                  False\n",
      "USE_RPN_ROIS                   True\n",
      "VALIDATION_STEPS               50\n",
      "WEIGHT_DECAY                   0.0001\n",
      "\n",
      "\n",
      "WARNING:tensorflow:From c:\\Users\\User\\miniconda3\\envs\\anis\\lib\\site-packages\\tensorflow\\python\\ops\\array_ops.py:5043: calling gather (from tensorflow.python.ops.array_ops) with validate_indices is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "The `validate_indices` argument has no effect. Indices are always validated on CPU and never validated on GPU.\n",
      "WARNING:tensorflow:From c:\\Users\\User\\miniconda3\\envs\\anis\\lib\\site-packages\\tensorflow\\python\\util\\deprecation.py:602: calling map_fn_v2 (from tensorflow.python.ops.map_fn) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use fn_output_signature instead\n"
     ]
    }
   ],
   "source": [
    "# Import necessary modules\n",
    "import os\n",
    "import json\n",
    "import face_detection\n",
    "from face_detection import FaceDataset\n",
    "import numpy as np\n",
    "from mrcnn import model as modellib\n",
    "from mrcnn import utils\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, precision_score, recall_score\n",
    "\n",
    "# Define model directory and weights path\n",
    "MODEL_DIR = os.path.abspath('D:/Hanifan/Face-Detection-MaskRCNN/logs')\n",
    "WEIGHTS_PATH = os.path.abspath('D:/Hanifan/Face-Detection-MaskRCNN/logs/mask_rcnn_face_new.h5')\n",
    "# Save JSON evaluation result\n",
    "JSON_RESULT = \"result_2.json\"\n",
    "SKIP_DATASET = 165 * 14              # Run 14 times to process all test images\n",
    "STOP_DATASET = SKIP_DATASET + 165   # Process next 165 images\n",
    "\n",
    "# Load configuration\n",
    "class InferenceConfig(face_detection.DatasetConfig):\n",
    "    GPU_COUNT = 1\n",
    "    IMAGES_PER_GPU = 1\n",
    "    # Eksperimen perubahan hyperparameter\n",
    "    RPN_NMS_THRESHOLD = 0.6\n",
    "    # DETECTION_MIN_CONFIDENCE = 0.8\n",
    "    # DETECTION_NMS_THRESHOLD = 0.3\n",
    "    # RPN_ANCHOR_STRIDE = 2\n",
    "config = InferenceConfig()\n",
    "config.display()\n",
    "\n",
    "# Initialize the model in inference mode\n",
    "model = modellib.MaskRCNN(mode=\"inference\", model_dir=MODEL_DIR, config=config)\n",
    "\n",
    "# Load pre-trained weights\n",
    "model.load_weights(WEIGHTS_PATH, by_name=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load Testing Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preparing testing dataset...\n"
     ]
    }
   ],
   "source": [
    "# Load testing dataset\n",
    "print(\"Preparing testing dataset...\")\n",
    "dataset_test = FaceDataset()\n",
    "dataset_test.load_face(\"D:/Hanifan/Face-Detection-MaskRCNN/wider_face_split/wider_face_test\")\n",
    "dataset_test.prepare()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluate the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics\n",
    "\n",
    "def compute_ar(pred_boxes, gt_boxes, list_iou_thresholds):\n",
    "    AR = []\n",
    "    for iou_threshold in list_iou_thresholds:\n",
    "        if len(pred_boxes) == 0 or len(gt_boxes) == 0:\n",
    "            AR.append(0)  # Tidak ada prediksi atau ground truth, tambahkan AR 0\n",
    "            continue\n",
    "        recall, _ = utils.compute_recall(pred_boxes, gt_boxes, iou=iou_threshold)\n",
    "        AR.append(recall)\n",
    "    AUC = 2 * (metrics.auc(list_iou_thresholds, AR))\n",
    "    return AUC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import expand_dims\n",
    "import mrcnn.model\n",
    "from mrcnn.utils import compute_ap\n",
    "\n",
    "def evaluate_model(dataset, model, cfg, list_iou_thresholds=None):\n",
    "    if list_iou_thresholds is None:\n",
    "        list_iou_thresholds = np.arange(0.5, 1.01, 0.1)\n",
    "\n",
    "    with open(JSON_RESULT, 'r') as file:\n",
    "        dataJSON = json.load(file)\n",
    "\n",
    "    APs = dataJSON.get(\"APs\", [])\n",
    "    ARs = dataJSON.get(\"ARs\", [])\n",
    "    precisions = dataJSON.get(\"precisions\", [])\n",
    "    recalls = dataJSON.get(\"recalls\", [])\n",
    "\n",
    "    y_true = []\n",
    "    y_pred = []\n",
    "\n",
    "    for image_id in dataset.image_ids:\n",
    "        if image_id < SKIP_DATASET:\n",
    "            continue\n",
    "        if image_id >= STOP_DATASET:\n",
    "            with open(JSON_RESULT, 'w') as file:\n",
    "                json.dump({\"APs\": APs, \"ARs\": ARs, \"precisions\": precisions, \"recalls\": recalls, \"y_true\": y_true, \"y_pred\": y_pred}, file, indent=4)\n",
    "            break\n",
    "        print(f\"Processing image {image_id}...\")\n",
    "\n",
    "        image, image_meta, gt_class_id, gt_bbox, gt_mask = mrcnn.model.load_image_gt(dataset, cfg, image_id)\n",
    "        scaled_image = mrcnn.model.mold_image(image, cfg)\n",
    "        sample = expand_dims(scaled_image, 0)\n",
    "        yhat = model.detect(sample, verbose=0)\n",
    "        r = yhat[0]\n",
    "\n",
    "        # Cek apakah prediksi dan ground truth memiliki data yang valid\n",
    "        if len(r['rois']) == 0 or len(gt_bbox) == 0:\n",
    "            print(\"Skipping image due to no predictions or ground truth.\")\n",
    "            continue\n",
    "\n",
    "        # Compute AP, precision, recall\n",
    "        AP, prec, rec, overlaps = compute_ap(gt_bbox, gt_class_id, gt_mask, r[\"rois\"], r[\"class_ids\"], r[\"scores\"], r['masks'], iou_threshold=0.5)\n",
    "        AR = compute_ar(r['rois'], gt_bbox, list_iou_thresholds)\n",
    "\n",
    "        # Simpan hasil\n",
    "        ARs.append(AR)\n",
    "        APs.append(AP)\n",
    "        precisions.append(prec.tolist())\n",
    "        recalls.append(rec.tolist())\n",
    "\n",
    "        # Collect true and predicted labels for confusion matrix\n",
    "        y_true.extend([1] * len(gt_class_id))\n",
    "        y_pred.extend([1] * len(r['class_ids']))  # Predicted as face\n",
    "\n",
    "        # Ensure y_true and y_pred are the same length\n",
    "        while len(y_true) < len(y_pred):\n",
    "            y_true.append(0)  # Adding false negatives\n",
    "        while len(y_pred) < len(y_true):\n",
    "            y_pred.append(0)  # Adding false positives\n",
    "\n",
    "    return APs, ARs, precisions, recalls, y_true, y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing image 2310...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Users\\User\\miniconda3\\envs\\anis\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:2424: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n",
      "  warnings.warn('`Model.state_updates` will be removed in a future version. '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing image 2311...\n",
      "Processing image 2312...\n",
      "Processing image 2313...\n",
      "Processing image 2314...\n",
      "Processing image 2315...\n",
      "Processing image 2316...\n",
      "Processing image 2317...\n",
      "Processing image 2318...\n",
      "Processing image 2319...\n",
      "Processing image 2320...\n",
      "Processing image 2321...\n",
      "Processing image 2322...\n",
      "Processing image 2323...\n",
      "Processing image 2324...\n",
      "Processing image 2325...\n",
      "Processing image 2326...\n",
      "Processing image 2327...\n",
      "Processing image 2328...\n",
      "Processing image 2329...\n",
      "Processing image 2330...\n",
      "Processing image 2331...\n",
      "Processing image 2332...\n",
      "Processing image 2333...\n",
      "Processing image 2334...\n",
      "Processing image 2335...\n",
      "Processing image 2336...\n",
      "Processing image 2337...\n",
      "Processing image 2338...\n",
      "Processing image 2339...\n",
      "Processing image 2340...\n",
      "Processing image 2341...\n",
      "Processing image 2342...\n",
      "Processing image 2343...\n",
      "Processing image 2344...\n",
      "Processing image 2345...\n",
      "Processing image 2346...\n",
      "Processing image 2347...\n",
      "Processing image 2348...\n",
      "Processing image 2349...\n",
      "Processing image 2350...\n",
      "Processing image 2351...\n",
      "Processing image 2352...\n",
      "Processing image 2353...\n",
      "Processing image 2354...\n",
      "Processing image 2355...\n",
      "Processing image 2356...\n",
      "Processing image 2357...\n",
      "Processing image 2358...\n",
      "Processing image 2359...\n",
      "Processing image 2360...\n",
      "Processing image 2361...\n",
      "Processing image 2362...\n",
      "Processing image 2363...\n",
      "Processing image 2364...\n",
      "Processing image 2365...\n",
      "Processing image 2366...\n",
      "Processing image 2367...\n",
      "Processing image 2368...\n",
      "Processing image 2369...\n",
      "Processing image 2370...\n",
      "Processing image 2371...\n",
      "Processing image 2372...\n",
      "Processing image 2373...\n",
      "Processing image 2374...\n",
      "Processing image 2375...\n",
      "Processing image 2376...\n",
      "Processing image 2377...\n",
      "Processing image 2378...\n",
      "Processing image 2379...\n",
      "Processing image 2380...\n",
      "Processing image 2381...\n",
      "Processing image 2382...\n",
      "Processing image 2383...\n",
      "Processing image 2384...\n",
      "Processing image 2385...\n",
      "Processing image 2386...\n",
      "Processing image 2387...\n",
      "Processing image 2388...\n",
      "Processing image 2389...\n",
      "Processing image 2390...\n",
      "Processing image 2391...\n",
      "Processing image 2392...\n",
      "Processing image 2393...\n",
      "Processing image 2394...\n",
      "Processing image 2395...\n",
      "Processing image 2396...\n",
      "Processing image 2397...\n",
      "Processing image 2398...\n",
      "Processing image 2399...\n",
      "Processing image 2400...\n",
      "Processing image 2401...\n",
      "Processing image 2402...\n",
      "Processing image 2403...\n",
      "Processing image 2404...\n",
      "Processing image 2405...\n",
      "Processing image 2406...\n",
      "Processing image 2407...\n"
     ]
    }
   ],
   "source": [
    "# Run evaluation\n",
    "APs, ARs, precisions, recalls, y_true, y_pred = evaluate_model(dataset_test, model, config)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute confusion matrix\n",
    "cm = confusion_matrix(y_true, y_pred)\n",
    "\n",
    "# Plot confusion matrix\n",
    "fig, ax = plt.subplots(figsize=(8, 6))\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['False', 'True'])\n",
    "disp.plot(ax=ax, cmap='RdPu')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.6678107346253018\n",
      "Recall: 0.4809220903807549\n",
      "mAP: 0.6353811218469854\n"
     ]
    }
   ],
   "source": [
    "# Calculate and print precision, recall, and mAP\n",
    "precision = np.mean([np.mean(p) for p in precisions])\n",
    "recall = np.mean([np.mean(r) for r in recalls])\n",
    "mAP = np.mean(APs)\n",
    "\n",
    "print(f\"Precision: {precision}\")\n",
    "print(f\"Recall: {recall}\")\n",
    "print(f\"mAP: {mAP}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
